#define LG_USENG 1033

table(feature)

nuka
{
    id = "cv01";
    name.LG_USENG = string("Nukta forms");
    default = single;
    settings
    {
        single
        {
            value = 0;
            name.LG_USENG = string("Single dot");
        }
        double
        {
            value = 1;
            name.LG_USENG = string("Double dot");
        }
        ring
        {
            value = 2;
            name.LG_USENG = string("Single ring");
        }
    }
}

endtable;

table(language)

bkurm {
    languages = ("xub");
    nuka = ring;
};

jkurm {
    languages = ("xuj");
    nuka = ring;
}

irula {
    languages = ("iru");
    nuka = double;
}

chetti {
    languages = ("ctt");
    nuka = single;
}

endtable;

table(glyph)
    cCons = (g0b95 g0b99 g0b9a g0b9c g0b9e g0b9f g0ba3 g0ba4 g0ba8 g0ba9 g0baa g0bae g0baf g0bb0 g0bb1 g0bb2 g0bb3 g0bb4 g0bb5 /*g0bb6*/ g0bb7 g0bb8 g0bb9)
    cSplitMatras = (g0bca g0bcb g0bcc)
    cReOrder = (g0bc6 g0bc7 g0bc8)
    allCons = (cCons clig0BB7)
    split_base = (g0bca g0bcb g0bcc)
    split1 = (g0bc6 g0bc7 g0bc6)
    split2 = (g0bbe g0bbe g0bd7)
    cMatra = (g0bbe g0bbf g0bc0 g0bc1 g0bc2 g0bc6 g0bc7 g0bc8 g0bca g0bcb g0bcc)
endtable;

#define opt2(x) [x x?]?
#define CLUS1 [clig0BCD g0bbc?]?
#define CLUS2 [allCons g0bbc? g0bcd g200c?]?
#define CLUSINI CLUS1 CLUS2 CLUS1 CLUS2

/* Substitution rules start here */
/* very good */
table(substitution)

pass(1)
// Basic ligatures before reordering
    cligno_0BB7 g0bcd g0bb7 > clig0BB7:(1 3 4) _ _ / ^ _ g0bbc? _ _;
    g0bb8 g0bcd g0bb0 g0bc0 > g0bb8_0bcd_0bb0_0bc0:(1 v c m) _ _ _ / _ g0bbc? _=v _=c g0bbc? _=m;
// Complain about cons halant vowel
    _ > g25cc / allCons g0bbc? g0bcd _ cMatra;
endpass;

#define reorder(x) _ split_base > split1$a:a split2$a:a / _ x g0bbc? _=a;\
     _ cReOrder > @a _ / _ x g0bbc? _=a;\
     _ _ cReOrder g0bbc > @a @b _ _ / _ _ x g0bbc? _=a _=b; 

pass(2)
// Reordered (including split) vowel matras
    reorder(g0b95_0bb7)
//    reorder(g0b95 g0bcd g0bb6)    // there is no g0bb6 in the fonts
    reorder(g0bb8 g0bbc? g0bcd g0bb0)
    reorder(cCons)
    reorder(clig0BCD)
endpass;

pass(3)
// Reordered vowel ligatures
    g0bbc g0bbc > g0bbc:(1 2) _ / ^ _ _;
    g0bc8 cligno_0BC8 > _ clig0BC8:(1 2);
    cligno_0BBE g0bbe > clig0BBE:(1 3) _ / _ g0bbc? _;
    cligno_0BBF g0bbf > clig0BBF:(1 3) _ / _ g0bbc? _;
    cligno_0BC0 g0bc0 > clig0BC0:(1 3) _ / _ g0bbc? _;
    cligno_0BC1 g0bc1 > clig0BC1:(1 3) _ / _ g0bbc? _;
    cligno_0BC2 g0bc2 > clig0BC2:(1 3) _ / _ g0bbc? _;
//  cligno_0BCD g0bcd > clig0BCD:(1 3) _ / _ g0bbc? _;
endpass;

if (nuka != single)
pass(4)

if (nuka == double)
    g0bbc > g0bbc_double;
else if (nuka == ring)
    g0bbc > g0bbc_ring;
endif

endpass;
endif;


endtable;
/* Substitution rules end here */

/* get make_gdl to do this work
table(positioning)
pass(1)
cTakesNDia cNDia {attach.to=@1; attach.at=NS; attach.with=NM; user1=1} / _ opt2(cnTakesNDia) _{user1 == 0};
cTakesRDia cRDia {attach.to=@1; attach.at=RS; attach.with=RM};
cTakesVDia cVDia {attach.to=@1; attach.at=VS; attach.with=VM};
endpass
endtable
*/

